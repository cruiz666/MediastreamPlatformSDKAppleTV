// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-tvos14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MediastreamPlatformSDKAppleTV
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Foundation
import GoogleInteractiveMediaAds
import MediaPlayer
@_exported import MediastreamPlatformSDKAppleTV
import Swift
import SystemConfiguration
import UIKit
import YouboraAVPlayerAdapter
import YouboraLib
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers public class AssetLoaderDelegate : ObjectiveC.NSObject {
  @objc deinit
}
extension MediastreamPlatformSDKAppleTV.AssetLoaderDelegate : AVFoundation.AVAssetResourceLoaderDelegate {
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForRenewalOfRequestedResource renewalRequest: AVFoundation.AVAssetResourceRenewalRequest) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class EventManager {
  open func listenTo(eventName: Swift.String, action: @escaping (() -> ()))
  open func listenTo(eventName: Swift.String, action: @escaping ((Any?) -> ()))
  open func removeListeners(eventNameToRemoveOrNil: Swift.String?)
  open func trigger(eventName: Swift.String, information: Any? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MediastreamCustomUIView : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var topRightLogo: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var topLeftLogo: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var bottomLeftLogo: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var bottomRightLogo: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var topLayout: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var bottomLayout: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var dismissButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var liveStatus: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var title: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var playButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var backwardButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var volumeButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var fullscreenButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var logoControlBar: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var currentTime: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var duration: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var dvrLiveButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var bufferingIndicator: UIKit.UIActivityIndicatorView!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class MediastreamDAIConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public enum Environments : Swift.String {
    case PRODUCTION
    case DEV
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  open var assetKey: Swift.String? {
    get
    set(val)
  }
  open var stream_id: Swift.String? {
    get
    set(val)
  }
  open var stream_manifest: Swift.String? {
    get
    set(val)
  }
  open var media_verification_url: Swift.String? {
    get
    set(val)
  }
  open var metadata_url: Swift.String? {
    get
    set(val)
  }
  open var session_update_url: Swift.String? {
    get
    set(val)
  }
  open var polling_frequency: Swift.Int {
    get
    set(val)
  }
  open var environment: MediastreamPlatformSDKAppleTV.MediastreamDAIConfig.Environments {
    get
    set(val)
  }
  open var id: Swift.String? {
    get
    set(val)
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class MediastreamPlatformSDK : UIKit.UIViewController, GoogleInteractiveMediaAds.IMAAdsLoaderDelegate, GoogleInteractiveMediaAds.IMAAdsManagerDelegate, AVKit.AVPlayerViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) open var isPlayerReady: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isPlayingAds: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var events: MediastreamPlatformSDKAppleTV.EventManager
  @_Concurrency.MainActor(unsafe) open var player: AVFoundation.AVPlayer?
  @_Concurrency.MainActor(unsafe) open var playerViewController: AVKit.AVPlayerViewController?
  @_Concurrency.MainActor(unsafe) open var playerLayer: AVFoundation.AVPlayerLayer?
  @_Concurrency.MainActor(unsafe) open var currentStringDuration: Swift.String?
  @_Concurrency.MainActor(unsafe) open var currentStringValue: Swift.String?
  @_Concurrency.MainActor(unsafe) open var timeSliderMaximumValue: Swift.Float?
  @_Concurrency.MainActor(unsafe) open var timeSliderMinimunValue: Swift.Float?
  @_Concurrency.MainActor(unsafe) open var currentTimeValue: Swift.Float?
  @_Concurrency.MainActor(unsafe) open var dismissButton: UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) open var castUrl: Swift.String
  @_Concurrency.MainActor(unsafe) open var mediaTitle: Swift.String
  @_Concurrency.MainActor(unsafe) open var initPreparePlayerTimestamp: Foundation.Date?
  public enum StaticUrl : Swift.String {
    case PRODUCTION
    case DEV
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var currentTime: Swift.Double {
    get
    set(val)
  }
  @_Concurrency.MainActor(unsafe) open var volume: Swift.Int {
    get
    set(val)
  }
  @_Concurrency.MainActor(unsafe) open func clearWaitingCount()
  @_Concurrency.MainActor(unsafe) open func isLocalFile() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func removeObservers()
  @objc @_Concurrency.MainActor(unsafe) open func releasePlayer()
  @_Concurrency.MainActor(unsafe) open func reloadAssets()
  @_Concurrency.MainActor(unsafe) open func playBackgroundAudio()
  @_Concurrency.MainActor(unsafe) open func getBandwidth() -> Swift.Double
  @_Concurrency.MainActor(unsafe) open func getBitrate() -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func getInitBufferingTime() -> Swift.Int64
  @_Concurrency.MainActor(unsafe) open func setInitBufferingTime(time: Foundation.Date)
  @_Concurrency.MainActor(unsafe) open func checkIsBuffering() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func checkIsPlaying() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func getCurrentPosition() -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func getDuration() -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func getLiveDuration() -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func getHeight() -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func getHostname() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func getUniqueId() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func getSessionID() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func getWaitingCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func tooglePlay()
  @objc @_Concurrency.MainActor(unsafe) open func play()
  @objc @_Concurrency.MainActor(unsafe) open func pause()
  @_Concurrency.MainActor(unsafe) open func stop()
  @objc @_Concurrency.MainActor(unsafe) open func seekTo(_ time: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func fordward(_ time: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) open func backward(_ time: Swift.Double)
  @_Concurrency.MainActor(unsafe) open func getCurrentMediaConfig() -> MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig
  @_Concurrency.MainActor(unsafe) open func getScreenResolution() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func getResolution() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func getTimeString(from time: CoreMedia.CMTime) -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) open func contentDidFinishPlaying(_ notification: Foundation.Notification)
  @_Concurrency.MainActor(unsafe) @objc open func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData!)
  @_Concurrency.MainActor(unsafe) @objc open func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData!)
  @_Concurrency.MainActor(unsafe) @objc open func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent!)
  @_Concurrency.MainActor(unsafe) @objc open func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @_Concurrency.MainActor(unsafe) @objc open func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @_Concurrency.MainActor(unsafe) @objc open func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive error: GoogleInteractiveMediaAds.IMAAdError!)
  @_Concurrency.MainActor(unsafe) open func webOpenerDidClose(inAppBrowser webOpener: ObjectiveC.NSObject!)
  @_Concurrency.MainActor(unsafe) open func webOpenerDidOpen(inAppBrowser webOpener: ObjectiveC.NSObject!)
  @_Concurrency.MainActor(unsafe) open func webOpenerWillClose(inAppBrowser webOpener: ObjectiveC.NSObject!)
  @_Concurrency.MainActor(unsafe) open func webOpenerWillOpen(inAppBrowser webOpener: ObjectiveC.NSObject!)
  @_Concurrency.MainActor(unsafe) open func webOpenerWillOpenExternalBrowser(_ webOpener: ObjectiveC.NSObject!)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) open func getPBId() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func getSId() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func getUId() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func preparePlayer(player: AVFoundation.AVPlayer)
  @objc @_Concurrency.MainActor(unsafe) open func reloadPlayer(_ config: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig)
  @objc @_Concurrency.MainActor(unsafe) open func setup(_ config: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig)
  @_Concurrency.MainActor(unsafe) open func setupMediaPlayerNotificationView()
  @objc @_Concurrency.MainActor(unsafe) open func getMediaTitle() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) open func getMediaPoster() -> Swift.String
  @_Concurrency.MainActor(unsafe) open func setupNotificationView()
  @_Concurrency.MainActor(unsafe) open func playNext()
  @_Concurrency.MainActor(unsafe) open func playPrev()
  @objc @_Concurrency.MainActor(unsafe) open func enterFullscreen(fullscreen: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func getCurrentTime() -> Swift.Int64
  @_Concurrency.MainActor(unsafe) open func showDaiClickerView(show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func getPreviousCurrentTime() -> Swift.Int64
  @_Concurrency.MainActor(unsafe) open func setPreviousCurrentTime(time: Swift.Int64)
  @objc @_Concurrency.MainActor(unsafe) open func getVersion() -> Swift.String
  @objc deinit
}
@objc open class MediastreamPlayerCollector : ObjectiveC.NSObject {
  public init(mdstrm: MediastreamPlatformSDKAppleTV.MediastreamPlatformSDK, config: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig)
  open func setNewConfig(config: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig)
  open func startCollector()
  open func stopCollector()
  open func releaseCollector()
  open func addPlayerLoadEvent(position: Swift.Int64)
  open func addErrorEvent(errorData: [Swift.String : Any])
  open func track()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class MediastreamPlayerConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public enum VideoTypes : Swift.String {
    case LIVE
    case VOD
    case EPISODE
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Environments : Swift.String {
    case PRODUCTION
    case DEV
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum AudioVideoFormat : Swift.String {
    case HLS
    case M4A
    case MP3
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  open var appName: Swift.String? {
    get
    set(val)
  }
  open var appVersion: Swift.String? {
    get
    set(val)
  }
  open var distributorId: Swift.String? {
    get
    set(val)
  }
  open var accessToken: Swift.String? {
    get
    set(val)
  }
  open var accountID: Swift.String? {
    get
    set(val)
  }
  open func addAdCustomAttribute(_ key: Swift.String, value: Swift.String)
  open func addYouboraExtraParams(_ value: Swift.String)
  open var adURL: Swift.String? {
    get
    set(val)
  }
  open func addDrmHeader(_ key: Swift.String, value: Swift.String)
  open var analyticsCustom: Swift.String? {
    get
    set(val)
  }
  open var appCertificateUrl: Swift.String? {
    get
    set(val)
  }
  open var autoplay: Swift.Bool {
    get
    set(val)
  }
  open var showBackgroundOnTitleAndControls: Swift.Bool {
    get
    set(val)
  }
  open var customerID: Swift.String? {
    get
    set(val)
  }
  open var needReload: Swift.Bool {
    get
    set(val)
  }
  open var debug: Swift.Bool {
    get
    set(val)
  }
  open var dvr: Swift.Bool {
    get
    set(val)
  }
  open var dvrStart: Swift.String? {
    get
    set(val)
  }
  open var dvrEnd: Swift.String? {
    get
    set(val)
  }
  open var customUI: Swift.Bool {
    get
    set(val)
  }
  open var drmHeaders: [(Swift.String, Swift.String)] {
    get
  }
  open var drmUrl: Swift.String? {
    get
    set(val)
  }
  open var playerId: Swift.String? {
    get
    set(val)
  }
  open var environment: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.Environments {
    get
    set(val)
  }
  open var id: Swift.String? {
    get
    set(val)
  }
  open var maxProfile: Swift.String? {
    get
    set(val)
  }
  open var showControls: Swift.Bool {
    get
    set(val)
  }
  open var showDismissButton: Swift.Bool {
    get
    set(val)
  }
  open var showCastButton: Swift.Bool {
    get
    set(val)
  }
  open var useCustomCastButton: UIKit.UIButton? {
    get
    set(val)
  }
  open var loadNextAutomatically: Swift.Bool {
    get
    set(val)
  }
  open var trackEnable: Swift.Bool {
    get
    set(val)
  }
  open var src: Foundation.NSURL? {
    get
    set(val)
  }
  open var referer: Swift.String? {
    get
    set(val)
  }
  open var startAt: Swift.Int {
    get
    set(val)
  }
  open var type: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.VideoTypes {
    get
    set(val)
  }
  open var volume: Swift.Int {
    get
    set(val)
  }
  open var windowDvr: Swift.Int {
    get
    set(val)
  }
  open var videoFormat: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.AudioVideoFormat {
    get
    set(val)
  }
  open var protocoL: Swift.String {
    get
    set(val)
  }
  open func hasAds() -> Swift.Bool
  open func getAdQueryString() -> Swift.String
  open func getYouboraExtraParams() -> [Swift.String]
  open func getMediaQueryString() -> Swift.String
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
public class MediastreamPlayerReachability {
  public typealias NetworkReachable = (MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability) -> ()
  public typealias NetworkUnreachable = (MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability.NetworkStatus, b: MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability.NetworkReachable?
  public var whenUnreachable: MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc open class MediastreamPlayerTracker : ObjectiveC.NSObject {
  public init(config: MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig, SDK: MediastreamPlatformSDKAppleTV.MediastreamPlatformSDK)
  open func wasTrackerInitialized() -> Swift.Bool
  open func setCanPlayDate(canPlayDate: Foundation.Date)
  open func startTrackPing()
  open func stopTrackPing()
  open func track(firstStart: Swift.Bool)
  open func getUrlQueryString() -> Swift.String
  @objc open func pingTask()
  @objc deinit
}
@available(*, deprecated, renamed: "SwiftyJSONError.errorDomain", message: "ErrorDomain is deprecated. Use `SwiftyJSONError.errorDomain` instead.")
public let ErrorDomain: Swift.String
@available(*, deprecated, renamed: "SwiftyJSONError.unsupportedType", message: "ErrorUnsupportedType is deprecated. Use `SwiftyJSONError.unsupportedType` instead.")
public let ErrorUnsupportedType: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.indexOutOfBounds", message: "ErrorIndexOutOfBounds is deprecated. Use `SwiftyJSONError.indexOutOfBounds` instead.")
public let ErrorIndexOutOfBounds: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.wrongType", message: "ErrorWrongType is deprecated. Use `SwiftyJSONError.wrongType` instead.")
public let ErrorWrongType: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.notExist", message: "ErrorNotExist is deprecated. Use `SwiftyJSONError.notExist` instead.")
public let ErrorNotExist: Swift.Int
@available(*, deprecated, renamed: "SwiftyJSONError.invalidJSON", message: "ErrorInvalidJSON is deprecated. Use `SwiftyJSONError.invalidJSON` instead.")
public let ErrorInvalidJSON: Swift.Int
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MediastreamPlatformSDKAppleTV.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  @available(*, deprecated, message: "Use instead `init(parseJSON: )`")
  public static func parse(_ json: Swift.String) -> MediastreamPlatformSDKAppleTV.JSON
  public mutating func merge(with other: MediastreamPlatformSDKAppleTV.JSON) throws
  public func merged(with other: MediastreamPlatformSDKAppleTV.JSON) throws -> MediastreamPlatformSDKAppleTV.JSON
  public var type: MediastreamPlatformSDKAppleTV.`Type` {
    get
  }
  public var error: MediastreamPlatformSDKAppleTV.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: MediastreamPlatformSDKAppleTV.JSON {
    get
  }
  public static var null: MediastreamPlatformSDKAppleTV.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: MediastreamPlatformSDKAppleTV.Index<T>, rhs: MediastreamPlatformSDKAppleTV.Index<T>) -> Swift.Bool
  public static func < (lhs: MediastreamPlatformSDKAppleTV.Index<T>, rhs: MediastreamPlatformSDKAppleTV.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = MediastreamPlatformSDKAppleTV.Index<MediastreamPlatformSDKAppleTV.JSON>
public typealias JSONRawIndex = MediastreamPlatformSDKAppleTV.Index<Any>
extension MediastreamPlatformSDKAppleTV.JSON : Swift.Collection {
  public typealias Index = MediastreamPlatformSDKAppleTV.JSONRawIndex
  public var startIndex: MediastreamPlatformSDKAppleTV.JSON.Index {
    get
  }
  public var endIndex: MediastreamPlatformSDKAppleTV.JSON.Index {
    get
  }
  public func index(after i: MediastreamPlatformSDKAppleTV.JSON.Index) -> MediastreamPlatformSDKAppleTV.JSON.Index
  public subscript(position: MediastreamPlatformSDKAppleTV.JSON.Index) -> (Swift.String, MediastreamPlatformSDKAppleTV.JSON) {
    get
  }
  public typealias Element = (Swift.String, MediastreamPlatformSDKAppleTV.JSON)
  public typealias Indices = Swift.DefaultIndices<MediastreamPlatformSDKAppleTV.JSON>
  public typealias Iterator = Swift.IndexingIterator<MediastreamPlatformSDKAppleTV.JSON>
  public typealias SubSequence = Swift.Slice<MediastreamPlatformSDKAppleTV.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: MediastreamPlatformSDKAppleTV.JSONKey { get }
}
extension Swift.Int : MediastreamPlatformSDKAppleTV.JSONSubscriptType {
  public var jsonKey: MediastreamPlatformSDKAppleTV.JSONKey {
    get
  }
}
extension Swift.String : MediastreamPlatformSDKAppleTV.JSONSubscriptType {
  public var jsonKey: MediastreamPlatformSDKAppleTV.JSONKey {
    get
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public subscript(path: [any MediastreamPlatformSDKAppleTV.JSONSubscriptType]) -> MediastreamPlatformSDKAppleTV.JSON {
    get
    set
  }
  public subscript(path: any MediastreamPlatformSDKAppleTV.JSONSubscriptType...) -> MediastreamPlatformSDKAppleTV.JSON {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: MediastreamPlatformSDKAppleTV.JSON.StringLiteralType)
  public init(unicodeScalarLiteral value: MediastreamPlatformSDKAppleTV.JSON.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = MediastreamPlatformSDKAppleTV.JSON.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = MediastreamPlatformSDKAppleTV.JSON.StringLiteralType
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.ExpressibleByNilLiteral {
  @available(*, deprecated, message: "use JSON.null instead. Will be removed in future versions")
  public init(nilLiteral: ())
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [MediastreamPlatformSDKAppleTV.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var array: [MediastreamPlatformSDKAppleTV.JSON]? {
    get
  }
  public var arrayValue: [MediastreamPlatformSDKAppleTV.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var dictionary: [Swift.String : MediastreamPlatformSDKAppleTV.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : MediastreamPlatformSDKAppleTV.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.Comparable {
}
public func == (lhs: MediastreamPlatformSDKAppleTV.JSON, rhs: MediastreamPlatformSDKAppleTV.JSON) -> Swift.Bool
public func <= (lhs: MediastreamPlatformSDKAppleTV.JSON, rhs: MediastreamPlatformSDKAppleTV.JSON) -> Swift.Bool
public func >= (lhs: MediastreamPlatformSDKAppleTV.JSON, rhs: MediastreamPlatformSDKAppleTV.JSON) -> Swift.Bool
public func > (lhs: MediastreamPlatformSDKAppleTV.JSON, rhs: MediastreamPlatformSDKAppleTV.JSON) -> Swift.Bool
public func < (lhs: MediastreamPlatformSDKAppleTV.JSON, rhs: MediastreamPlatformSDKAppleTV.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: MediastreamPlatformSDKAppleTV.writingOptionsKeys, b: MediastreamPlatformSDKAppleTV.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MediastreamPlatformSDKAppleTV.JSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension MediastreamPlatformSDKAppleTV.MediastreamDAIConfig.Environments : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.MediastreamDAIConfig.Environments : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.MediastreamDAIConfig.Environments : Swift.RawRepresentable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlatformSDK.StaticUrl : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlatformSDK.StaticUrl : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlatformSDK.StaticUrl : Swift.RawRepresentable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.VideoTypes : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.VideoTypes : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.VideoTypes : Swift.RawRepresentable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.Environments : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.Environments : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.Environments : Swift.RawRepresentable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.AudioVideoFormat : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.AudioVideoFormat : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerConfig.AudioVideoFormat : Swift.RawRepresentable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability.NetworkStatus : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.MediastreamPlayerReachability.NetworkStatus : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.SwiftyJSONError : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.SwiftyJSONError : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.SwiftyJSONError : Swift.RawRepresentable {}
extension MediastreamPlatformSDKAppleTV.`Type` : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.`Type` : Swift.Hashable {}
extension MediastreamPlatformSDKAppleTV.`Type` : Swift.RawRepresentable {}
extension MediastreamPlatformSDKAppleTV.writingOptionsKeys : Swift.Equatable {}
extension MediastreamPlatformSDKAppleTV.writingOptionsKeys : Swift.Hashable {}
